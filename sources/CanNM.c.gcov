        -:    0:Source:../sources/CanNM.c
        -:    0:Graph:.\UT_CanNM.gcno
        -:    0:Data:.\UT_CanNM.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:/** ==================================================================================================================*\
        -:    2:  @file CanNm.c
        -:    3:
        -:    4: @brief CAN Network Management
        -:    5:
        -:    6: Implementation of CAN Network Management.
        -:    7:
        -:    8: @see ***.pdf
        -:    9: \*====================================================================================================================*/
        -:   10:
        -:   11:/*====================================================================================================================*\
        -:   12:    Załączenie nagłówków
        -:   13: \*====================================================================================================================*/
        -:   14:#include "../includes/CanNm.h"
        -:   15:#include "../includes/NmStack_Types.h"
        -:   16:#include <string.h>
        -:   17:/*====================================================================================================================*\
        -:   18:    Makra lokalne
        -:   19: \*====================================================================================================================*/
        -:   20:#define CANNM_CBV_REPEAT_MESSAGE_REQUEST	0x01u  /**< @req CANNM045 */
        -:   21:#define CANNM_CBV_ACTIVE_WAKEUP_BIT 		0x10
        -:   22:/*====================================================================================================================*\
        -:   23:    Typy lokalne
        -:   24: \*====================================================================================================================*/
        -:   25:typedef enum {
        -:   26:	CANNM_STATUS_INIT, CANNM_STATUS_UNINIT
        -:   27:} CanNm_InitStatusType;
        -:   28:
        -:   29:
        -:   30:/*====================================================================================================================*\
        -:   31:    Zmienne globalne
        -:   32: \*====================================================================================================================*/
        -:   33:CanNm_InitStatusType InitStatus = CANNM_STATUS_UNINIT;
        -:   34:
        -:   35:CanNm_InternalType CanNm_Internal;
        -:   36:
        -:   37:static const CanNm_ConfigType* CanNm_ConfigPtr;
        -:   38:/*====================================================================================================================*\
        -:   39:    Zmienne lokalne (statyczne)
        -:   40: \*====================================================================================================================*/
        -:   41:
        -:   42:/*====================================================================================================================*\
        -:   43:    Deklaracje funkcji lokalnych
        -:   44: \*====================================================================================================================*/
        -:   45:
        -:   46:/*====================================================================================================================*\
        -:   47:    Kod globalnych funkcji inline i makr funkcyjnych
        -:   48: \*====================================================================================================================*/
        -:   49:
        -:   50:/*====================================================================================================================*\
        -:   51:    Kod funkcji
        -:   52: \*====================================================================================================================*/
        -:   53:
        -:   54:/**
        -:   55: @brief Init
        -:   56:
        -:   57:
        -:   58: */
        -:   59:/** must be called directly after canIf /** @req CANNM253 */
        2:   60:void CanNm_Init(const CanNm_ConfigType* cannmConfigPtr) {
        -:   61:
        2:   62:	CanNm_ConfigPtr = cannmConfigPtr;  /**< @req CANNM060 */
        2:   63:	CanNm_InternalType* ModuleInternal = &CanNm_Internal;
        -:   64:
        2:   65:	ModuleInternal->Mode = NM_MODE_BUS_SLEEP;    /** @req CANNM144 */
        2:   66:	ModuleInternal->State = NM_STATE_BUS_SLEEP;  /** @req CANNM141 */
        2:   67:	ModuleInternal->Requested = FALSE;           /** @req CANNM143 */ /*released*/
        -:   68:
        -:   69://	CanNmBusLoadReductionActive = FALSE; /** @req CANNM023 */
        -:   70:
        -:   71://	CanNm_ConfigPtr
        -:   72:
        -:   73:	/** @req CANNM085 */
        2:   74:	memset(ModuleInternal->TxMessageSdu, 0x00, 8);
        2:   75:	memset(ModuleInternal->RxMessageSdu, 0x00, 8);
        -:   76:
        -:   77:	/** @req CANNM025 */ //TODO CanNmComUserDataSupport is enabled
        2:   78:	uint8* destUserData = CanNm_Internal_GetUserDataPtr(CanNm_ConfigPtr, ModuleInternal->TxMessageSdu);
        2:   79:	uint8 userDataLength = CanNm_Internal_GetUserDataLength(CanNm_ConfigPtr, ModuleInternal);
        2:   80:	memset(destUserData, 0xFF, userDataLength);
        -:   81:
        -:   82:	 /** @req CANNM060 */
        -:   83:
        2:   84:	InitStatus = CANNM_STATUS_INIT;
        2:   85:}
        -:   86:
        -:   87:/**
        -:   88: @brief DeInit
        -:   89:
        -:   90:
        -:   91: */
        1:   92:void CanNm_DeInit(void){
        -:   93:
        1:   94:	if (InitStatus == CANNM_STATUS_INIT) {		/** @req BSW232 */
    #####:   95:		CanNm_InternalType* ModuleInternal = &CanNm_Internal;
        -:   96:
    #####:   97:		ModuleInternal->State = NM_STATE_UNINIT;
    #####:   98:		InitStatus = CANNM_STATUS_UNINIT;
        -:   99:	}
        -:  100:	else {
        -:  101:	}
        1:  102:}
        -:  103:
        -:  104:/**
        -:  105: @brief CanNm_PassiveStartUp
        -:  106:
        -:  107:
        -:  108: */
    #####:  109:Std_ReturnType CanNm_PassiveStartUp(NetworkHandleType nmChannelHandle){
        -:  110:
    #####:  111:	Std_ReturnType ret_val = E_NOT_OK;
        -:  112:
    #####:  113:	if (InitStatus == CANNM_STATUS_INIT) {	/**< @req CANNM254 */
        -:  114:
    #####:  115:		CanNm_InternalType* ModuleInternal = &CanNm_Internal;
        -:  116:
    #####:  117:		if (ModuleInternal->Mode == NM_MODE_BUS_SLEEP || ModuleInternal->Mode == NM_MODE_PREPARE_BUS_SLEEP) {
        -:  118:
    #####:  119:			ModuleInternal->Mode = NM_MODE_NETWORK;		/**< @req CANNM314 */ /**< @req CANNM315 */ /**< @req CANNM128 */
    #####:  120:			ModuleInternal->State = NM_STATE_REPEAT_MESSAGE;
    #####:  121:			ModuleInternal->TimeoutTimeLeft = CanNm_ConfigPtr->CanNmTimeoutTime; 	/**< @req CANNM096 */
    #####:  122:			ModuleInternal->RepeatMessageTimeLeft = CanNm_ConfigPtr->CanNmRepeatMessageTime; 	/**< @req CANNM102 */
        -:  123://			ModuleInternal->MessageCycleTimeLeft = CanNm_ConfigPtr->MessageCycleOffsetTime;
        -:  124:			// Notify 'Network Mode'
    #####:  125:			Nm_NetworkMode(nmChannelHandle); /**< @req 	 */
        -:  126:
    #####:  127:			ret_val = E_OK;
        -:  128:		} else {
    #####:  129:			ret_val = E_NOT_OK;		/**< @req CANNM147 */
        -:  130:		}
        -:  131:
        -:  132:	} else {
    #####:  133:		ret_val = E_NOT_OK;
        -:  134:	}
        -:  135:
    #####:  136:	return ret_val;
        -:  137:}
        -:  138:
        -:  139:/**
        -:  140: @brief CanNm_NetworkRequest
        -:  141:
        -:  142:
        -:  143: */
        3:  144:Std_ReturnType CanNm_NetworkRequest(NetworkHandleType nmChannelHandle){
        3:  145:	Std_ReturnType ret_val = E_NOT_OK;
        -:  146:
        3:  147:	if (InitStatus == CANNM_STATUS_INIT) {	/**< @req CANNM256 */
        -:  148:
        2:  149:		CanNm_InternalType* ModuleInternal = &CanNm_Internal;
        -:  150:
        2:  151:		ModuleInternal->Requested = TRUE;	/**< @req CANNM255 */ /**< @req CANNM104 */
        -:  152:
        2:  153:		if(ModuleInternal->Mode == NM_MODE_BUS_SLEEP || ModuleInternal->State == NM_MODE_PREPARE_BUS_SLEEP)
        -:  154:		{
        1:  155:			ModuleInternal->Mode = NM_MODE_NETWORK;
        1:  156:			ModuleInternal->State = NM_STATE_REPEAT_MESSAGE;
        1:  157:			ModuleInternal->TxMessageSdu[CanNm_ConfigPtr->CanNmPduCbvPosition] |= CANNM_CBV_ACTIVE_WAKEUP_BIT;	/**< @req CANNM401 */
        1:  158:			ret_val = E_OK;
        -:  159:		}
        -:  160:		else {
        1:  161:			ret_val = E_NOT_OK;
        -:  162:		}
        -:  163:	}
        -:  164:	else{
        1:  165:		 ret_val = E_NOT_OK;
        -:  166:	}
        3:  167:	return ret_val;
        -:  168:}
        -:  169:
        -:  170:
        -:  171:/**
        -:  172: @brief CanNm_NetworkRelease
        -:  173:
        -:  174:
        -:  175: */
        4:  176:Std_ReturnType CanNm_NetworkRelease(NetworkHandleType nmChannelHandle){
        4:  177:	Std_ReturnType ret_val = E_NOT_OK;
        -:  178:
        4:  179:	if (InitStatus == CANNM_STATUS_INIT) { /**< @req CANNM259 */
        -:  180:
        3:  181:		CanNm_InternalType* ModuleInternal = &CanNm_Internal;
        -:  182:
        3:  183:		ModuleInternal->Requested = FALSE; /**< @req CANNM105 */
        -:  184:
        3:  185:		if (ModuleInternal->Mode == NM_MODE_NETWORK) {
        2:  186:			if (ModuleInternal->State == NM_STATE_NORMAL_OPERATION) {
        1:  187:				ModuleInternal->Mode = NM_MODE_NETWORK;
        1:  188:				ModuleInternal->State = NM_STATE_READY_SLEEP; /**< @req CANNM118 */
        1:  189:				ret_val = E_OK;
        -:  190:			} else {
        1:  191:				ret_val = E_NOT_OK;
        -:  192:			}
        -:  193:		} else {
        1:  194:			ret_val = E_NOT_OK;
        -:  195:		}
        -:  196:	} else {
        1:  197:		ret_val = E_NOT_OK;
        -:  198:	}
        -:  199:
        4:  200:	return ret_val;
        -:  201:}
        -:  202:
        -:  203:/**
        -:  204: @brief CanNm_DisableCommunication
        -:  205:CANNM_COM_CONTROL_ENABLED = STD_OFF
        -:  206:
        -:  207: */
    #####:  208:Std_ReturnType CanNm_DisableCommunication(NetworkHandleType nmChannelHandle) {
    #####:  209:	Std_ReturnType ret_val = E_NOT_OK;
        -:  210:
    #####:  211:	if (InitStatus == CANNM_STATUS_INIT) { /**< @req CANNM261 */
    #####:  212:		ret_val = E_NOT_OK;
        -:  213:	}
        -:  214:
    #####:  215:	return ret_val;
        -:  216:}
        -:  217:/**
        -:  218: @brief CanNm_EnableCommunication
        -:  219:
        -:  220:
        -:  221: */
    #####:  222:Std_ReturnType CanNm_EnableCommunication(NetworkHandleType nmChannelHandle){
    #####:  223:	Std_ReturnType ret_val = E_NOT_OK;
        -:  224:
    #####:  225:	if (InitStatus == CANNM_STATUS_INIT) { /**< @req CANNM263 */
    #####:  226:		ret_val = E_NOT_OK;
        -:  227:	}
        -:  228:
    #####:  229:	return ret_val;
        -:  230:}
        -:  231:
        -:  232:/**
        -:  233: @brief CanNm_SetUserData
        -:  234:CANNM_USER_DATA_ENABLED == STD_ON
        -:  235:
        -:  236: */
    #####:  237:Std_ReturnType CanNm_SetUserData(NetworkHandleType nmChannelHandle, const uint8* nmUserDataPtr){
    #####:  238:	Std_ReturnType ret_val = E_OK;
        -:  239:
    #####:  240:	if (InitStatus == CANNM_STATUS_INIT) { /**< @req CANNM265 */
        -:  241:
    #####:  242:		CanNm_InternalType* ModuleInternal = &CanNm_Internal;
        -:  243:
    #####:  244:		uint8* destUserData = CanNm_Internal_GetUserDataPtr(CanNm_ConfigPtr, ModuleInternal->TxMessageSdu);
    #####:  245:		uint8 userDataLength = CanNm_Internal_GetUserDataLength(CanNm_ConfigPtr, ModuleInternal);
        -:  246:
    #####:  247:		memcpy(destUserData, nmUserDataPtr, userDataLength);	/**< @req CANNM159 */
    #####:  248:		ret_val = E_OK;
        -:  249:
        -:  250:	} else {
    #####:  251:		ret_val = E_NOT_OK;
        -:  252:	}
        -:  253:
    #####:  254:	return ret_val;
        -:  255:}
        -:  256:
        -:  257:/**
        -:  258: @brief CanNm_GetUserData
        -:  259:CANNM_USER_DATA_ENABLED == STD_ON
        -:  260:
        -:  261: */
    #####:  262:Std_ReturnType CanNm_GetUserData(NetworkHandleType nmChannelHandle, uint8* nmUserDataPtr){
    #####:  263:	Std_ReturnType ret_val = E_NOT_OK;
        -:  264:
    #####:  265:	if (InitStatus == CANNM_STATUS_INIT) { /**< @req CANNM267 */
        -:  266:
    #####:  267:		CanNm_InternalType* ModuleInternal = &CanNm_Internal;
        -:  268:
    #####:  269:		uint8* sourceUserData = CanNm_Internal_GetUserDataPtr(CanNm_ConfigPtr, ModuleInternal->RxMessageSdu);
    #####:  270:		uint8 userDataLength = CanNm_Internal_GetUserDataLength(CanNm_ConfigPtr, ModuleInternal);
        -:  271:
    #####:  272:		memcpy(nmUserDataPtr, sourceUserData, userDataLength);	/**< @req CANNM160 */
        -:  273:
    #####:  274:		ret_val = E_OK;
        -:  275:	} else {
    #####:  276:		ret_val = E_NOT_OK;
        -:  277:	}
        -:  278:
    #####:  279:	return ret_val;
        -:  280:}
        -:  281:
        -:  282:/**
        -:  283: @brief CanNm_Transmit
        -:  284:
        -:  285:
        -:  286: */
        -:  287:Std_ReturnType CanNm_Transmit(PduIdType TxPduId, const PduInfoType* PduInfoPtr);
        -:  288:
        -:  289:/**
        -:  290: @brief CanNm_GetNodeIdentifier
        -:  291:
        -:  292:
        -:  293: */
    #####:  294:Std_ReturnType CanNm_GetNodeIdentifier(NetworkHandleType nmChannelHandle, uint8* nmNodeIdPtr){
    #####:  295:	Std_ReturnType ret_val = E_NOT_OK;
        -:  296:
    #####:  297:	if (InitStatus == CANNM_STATUS_INIT) { /**< @req CANNM269 */
        -:  298:
    #####:  299:		CanNm_InternalType* ModuleInternal = &CanNm_Internal;
        -:  300:
    #####:  301:		if (CanNm_ConfigPtr->CanNmPduNidPosition == CANNM_PDU_OFF) {
    #####:  302:			ret_val = E_NOT_OK;
        -:  303:		}
        -:  304:		else {
    #####:  305:			*nmNodeIdPtr = ModuleInternal->RxMessageSdu[CanNm_ConfigPtr->CanNmPduNidPosition];	/**< @req CANNM132 */
    #####:  306:			ret_val = E_OK;
        -:  307:		}
        -:  308:
    #####:  309:		ret_val = E_OK;
        -:  310:	} else {
    #####:  311:		ret_val = E_NOT_OK;
        -:  312:	}
        -:  313:
    #####:  314:	return ret_val;
        -:  315:}
        -:  316:
        -:  317:/**
        -:  318: @brief CanNm_GetLocalNodeIdentifier
        -:  319:
        -:  320:
        -:  321: */
    #####:  322:Std_ReturnType CanNm_GetLocalNodeIdentifier(NetworkHandleType nmChannelHandle, uint8* nmNodeIdPtr){
    #####:  323:	Std_ReturnType ret_val = E_NOT_OK;
        -:  324:
    #####:  325:	if (InitStatus == CANNM_STATUS_INIT) { /**< @req CANNM271 */
        -:  326:
    #####:  327:		*nmNodeIdPtr = CanNm_ConfigPtr->CanNmNodeId;	/**< @req CANNM133 */
        -:  328:
    #####:  329:		ret_val = E_OK;
        -:  330:	} else {
    #####:  331:		ret_val = E_NOT_OK;
        -:  332:	}
        -:  333:
    #####:  334:	return ret_val;
        -:  335:}
        -:  336:
        -:  337:/**
        -:  338: @brief CanNm_RepeatMessageRequest
        -:  339:
        -:  340:
        -:  341: */
    #####:  342:Std_ReturnType CanNm_RepeatMessageRequest(NetworkHandleType nmChannelHandle){
    #####:  343:	Std_ReturnType ret_val = E_NOT_OK;
        -:  344:
    #####:  345:	if (InitStatus == CANNM_STATUS_INIT) { /**< @req CANNM273 */
        -:  346:
    #####:  347:		CanNm_InternalType* ModuleInternal = &CanNm_Internal;
        -:  348:
    #####:  349:		if (ModuleInternal->State != NM_STATE_REPEAT_MESSAGE
    #####:  350:				&& ModuleInternal->Mode != NM_MODE_PREPARE_BUS_SLEEP
    #####:  351:				&& ModuleInternal->Mode != NM_MODE_BUS_SLEEP) { /**< @req CANNM137 */
        -:  352:
    #####:  353:			if (ModuleInternal->State == NM_STATE_NORMAL_OPERATION || ModuleInternal->State == NM_STATE_READY_SLEEP) {
        -:  354:
    #####:  355:				ModuleInternal->Mode = NM_MODE_NETWORK;
    #####:  356:				ModuleInternal->State = NM_STATE_REPEAT_MESSAGE; /**< @req CANNM120 *//**< @req CANNM112 */
    #####:  357:				ModuleInternal->TxMessageSdu[CanNm_ConfigPtr->CanNmPduCbvPosition] = CANNM_CBV_REPEAT_MESSAGE_REQUEST; /**< @req CANNM121 *//**< @req CANNM113 */
        -:  358:
    #####:  359:				ret_val = E_OK;
        -:  360:
        -:  361:			} else {
    #####:  362:				ret_val = E_NOT_OK;
        -:  363:			}
        -:  364:		} else {
    #####:  365:			ret_val = E_NOT_OK;
        -:  366:		}
        -:  367:	} else {
    #####:  368:		ret_val = E_NOT_OK;
        -:  369:	}
        -:  370:
    #####:  371:	return ret_val;
        -:  372:}
        -:  373:
        -:  374:/**
        -:  375: @brief CanNm_GetPduData
        -:  376:
        -:  377:
        -:  378: */
    #####:  379:Std_ReturnType CanNm_GetPduData(NetworkHandleType nmChannelHandle, uint8* nmPduDataPtr){
    #####:  380:	Std_ReturnType ret_val = E_NOT_OK;
        -:  381:
    #####:  382:	if (InitStatus == CANNM_STATUS_INIT) { /**< @req CANNM275 */
        -:  383:
    #####:  384:		CanNm_InternalType* ModuleInternal = &CanNm_Internal;
        -:  385:
    #####:  386:		memcpy(nmPduDataPtr, ModuleInternal->RxMessageSdu, ModuleInternal->PduLength);  /**< @req CANNM138 */
        -:  387:
    #####:  388:		ret_val = E_OK;
        -:  389:	} else {
    #####:  390:		ret_val = E_NOT_OK;
        -:  391:	}
        -:  392:
    #####:  393:	return ret_val;
        -:  394:
        -:  395:}
        -:  396:
        -:  397:/**
        -:  398: @brief CanNm_GetState
        -:  399:
        -:  400:
        -:  401: */
    #####:  402:Std_ReturnType CanNm_GetState(NetworkHandleType nmChannelHandle, Nm_StateType* nmStatePtr, Nm_ModeType* nmModePtr){
    #####:  403:	Std_ReturnType ret_val = E_NOT_OK;
        -:  404:
    #####:  405:	if (InitStatus == CANNM_STATUS_INIT) { /**< @req CANNM277 */
        -:  406:
    #####:  407:		CanNm_InternalType* ModuleInternal = &CanNm_Internal;
        -:  408:
    #####:  409:		*nmStatePtr = ModuleInternal->State;		/**< @req CANNM091 */
    #####:  410:		*nmStatePtr = ModuleInternal->Mode;
        -:  411:
    #####:  412:		ret_val = E_OK;
        -:  413:	} else {
    #####:  414:		ret_val = E_NOT_OK;
        -:  415:	}
        -:  416:
    #####:  417:	return ret_val;
        -:  418:}
        -:  419:
        -:  420:/**
        -:  421: @brief CanNm_GetVersionInfo
        -:  422:TODO
        -:  423:@req CANNM224
        -:  424: */
    #####:  425:void CanNm_GetVersionInfo(Std_VersionInfoType* versioninfo){
    #####:  426:	CanNm_InternalType* ModuleInternal = &CanNm_Internal;
    #####:  427:	*versioninfo = ModuleInternal->VersionInfo;
    #####:  428:}
        -:  429:
        -:  430:/**
        -:  431: @brief CanNm_RequestBusSynchronization
        -:  432:CanNmBusSynchronizationEnabled = OFF; - req CANNM280
        -:  433:
        -:  434: */
    #####:  435:Std_ReturnType CanNm_RequestBusSynchronization(NetworkHandleType nmChannelHandle){
    #####:  436:	Std_ReturnType ret_val = E_NOT_OK;
        -:  437:
    #####:  438:	if (InitStatus == CANNM_STATUS_INIT) { /**< @req CANNM279 */
    #####:  439:		ret_val = E_OK;
        -:  440:	} else {
    #####:  441:		ret_val = E_NOT_OK;
        -:  442:	}
        -:  443:
    #####:  444:	return ret_val;
        -:  445:}
        -:  446:
        -:  447:/**
        -:  448: @brief CanNm_CheckRemoteSleepIndication
        -:  449:CanNmRemoteSleepIndEnabled = OFF
        -:  450:
        -:  451: */
    #####:  452:Std_ReturnType CanNm_CheckRemoteSleepIndication(NetworkHandleType nmChannelHandle, boolean* nmRemoteSleepIndPtr){
    #####:  453:	Std_ReturnType ret_val = E_NOT_OK;
        -:  454:
    #####:  455:	if (InitStatus == CANNM_STATUS_INIT) { /**< @req CANNM281 */
    #####:  456:		ret_val = E_OK;
        -:  457:	} else {
    #####:  458:		ret_val = E_NOT_OK;
        -:  459:	}
        -:  460:
    #####:  461:	return ret_val;
        -:  462:}
        -:  463:
        -:  464:/**
        -:  465: @brief CanNm_SetSleepReadyBit
        -:  466:CanNmCoordinatorSyncSupport = FALSE
        -:  467:
        -:  468: */
    #####:  469:Std_ReturnType CanNm_SetSleepReadyBit(NetworkHandleType nmChannelHandle, boolean nmSleepReadyBit){
    #####:  470:	Std_ReturnType ret_val = E_NOT_OK;
        -:  471:
    #####:  472:	if (InitStatus == CANNM_STATUS_INIT) { /**< @req CANNM339 */
    #####:  473:		ret_val = E_OK;
        -:  474:	} else {
    #####:  475:		ret_val = E_NOT_OK;
        -:  476:	}
        -:  477:
    #####:  478:	return ret_val;
        -:  479:}
        -:  480:
        -:  481:/**
        -:  482: @brief CanNm_PnLearningRequest
        -:  483:
        -:  484:TODO - DRAFT
        -:  485: */
    #####:  486:Std_ReturnType CanNm_PnLearningRequest(NetworkHandleType nmChannelHandle){
        -:  487:
    #####:  488:}
        -:  489:
        -:  490:/**
        -:  491: @brief
        -:  492:
        -:  493:TODO - DRAFT
        -:  494: */
    #####:  495:Std_ReturnType CanNm_RequestSynchronizedPncShutdown(NetworkHandleType nmChannelHandle, PNCHandleType pncId) {
        -:  496:
    #####:  497:}
        -:  498:
        -:  499:/**
        -:  500: @brief CanNm_TxConfirmation
        -:  501:
        -:  502:
        -:  503: */
    #####:  504:void CanNm_TxConfirmation(PduIdType TxPduId, Std_ReturnType result) {
        -:  505:
    #####:  506:	if (InitStatus == CANNM_STATUS_INIT) { /**< @req CANNM283 */
        -:  507:
    #####:  508:		CanNm_InternalType* ModuleInternal = &CanNm_Internal;
        -:  509:
    #####:  510:		if (ModuleInternal->Mode == NM_MODE_NETWORK) {
    #####:  511:			ModuleInternal->TimeoutTimeLeft =
    #####:  512:					CanNm_ConfigPtr->CanNmMsgTimeoutTime; /**< @req CANNM099 */
        -:  513:		} else {
        -:  514:		}
        -:  515:
        -:  516:	} else {
        -:  517:	}
    #####:  518:}
        -:  519:
        -:  520:/**
        -:  521: @brief
        -:  522:
        -:  523:
        -:  524: */
    #####:  525:void CanNm_RxIndication(PduIdType RxPduId, const PduInfoType* PduInfoPtr){
        -:  526:
    #####:  527:	if (InitStatus == CANNM_STATUS_INIT) { /**< @req CANNM277 */
        -:  528:
        -:  529:		//CanNm_ConfigPtr
    #####:  530:		CanNm_InternalType* ModuleInternal = &CanNm_Internal;
        -:  531:
    #####:  532:		memcpy(ModuleInternal->RxMessageSdu, PduInfoPtr->SduDataPtr, PduInfoPtr->SduLength);  /**< @req CANNM035 */
        -:  533:
    #####:  534:		boolean repeatMessageBitIndication = FALSE;
    #####:  535:		if (CanNm_ConfigPtr->CanNmPduCbvPosition != CANNM_PDU_OFF) {
    #####:  536:			uint8 cbv = ModuleInternal->RxMessageSdu[CanNm_ConfigPtr->CanNmPduCbvPosition];
    #####:  537:			repeatMessageBitIndication = cbv & CANNM_CBV_REPEAT_MESSAGE_REQUEST;
        -:  538:		}
        -:  539:
    #####:  540:		if (ModuleInternal->Mode == NM_MODE_BUS_SLEEP) {
    #####:  541:			Nm_NetworkStartIndication(CanNm_ConfigPtr->NmNetworkHandle);  /**< @req CANNM127 */
        -:  542:
    #####:  543:		} else if (ModuleInternal->Mode == NM_MODE_PREPARE_BUS_SLEEP) {
    #####:  544:			ModuleInternal->Mode = NM_MODE_NETWORK;		/**< @req CANNM124 */
    #####:  545:			ModuleInternal->State = NM_STATE_REPEAT_MESSAGE;
    #####:  546:			ModuleInternal->TimeoutTimeLeft = CanNm_ConfigPtr->CanNmMsgTimeoutTime;  /**< @req CANNM096 */
    #####:  547:			ModuleInternal->RepeatMessageTimeLeft = CanNm_ConfigPtr->CanNmRepeatMessageTime;
    #####:  548:			ModuleInternal->MessageCycleTimeLeft = CanNm_ConfigPtr->CanNmMsgCycleTime - CanNm_ConfigPtr->CanNmMsgCycleOffset;  /**< @req CANNM100 */
        -:  549:			// Notify 'Network Mode'
    #####:  550:			Nm_NetworkMode(CanNm_ConfigPtr->NmNetworkHandle);  /**< @req CANNM097 */
        -:  551:
    #####:  552:		} else if (ModuleInternal->Mode == NM_MODE_NETWORK) {
    #####:  553:			ModuleInternal->TimeoutTimeLeft = CanNm_ConfigPtr->CanNmMsgTimeoutTime;  /**< @req CANNM098 */
    #####:  554:			if (repeatMessageBitIndication) {
    #####:  555:				if (ModuleInternal->State == NM_STATE_READY_SLEEP) {
    #####:  556:					ModuleInternal->Mode = NM_MODE_NETWORK;
    #####:  557:					ModuleInternal->State = NM_STATE_REPEAT_MESSAGE;		/**< @req CANNM111 */
    #####:  558:					ModuleInternal->RepeatMessageTimeLeft = CanNm_ConfigPtr->CanNmRepeatMessageTime;
    #####:  559:					ModuleInternal->MessageCycleTimeLeft = CanNm_ConfigPtr->CanNmMsgCycleTime - CanNm_ConfigPtr->CanNmMsgCycleOffset;  /**< @req CANNM100 */
        -:  560:
    #####:  561:				} else if (ModuleInternal->State == NM_STATE_NORMAL_OPERATION) {
    #####:  562:					ModuleInternal->Mode = NM_MODE_NETWORK;
    #####:  563:					ModuleInternal->State = NM_STATE_REPEAT_MESSAGE;		/**< @req CANNM119 */
    #####:  564:					ModuleInternal->RepeatMessageTimeLeft = CanNm_ConfigPtr->CanNmRepeatMessageTime;
    #####:  565:					ModuleInternal->MessageCycleTimeLeft = CanNm_ConfigPtr->CanNmMsgCycleTime - CanNm_ConfigPtr->CanNmMsgCycleOffset;  /**< @req CANNM100 */
        -:  566:				} else {
        -:  567:					//Nothing to be done
        -:  568:				}
        -:  569:			}
        -:  570:		} else {
        -:  571:			//Nothing to be done
        -:  572:		}
        -:  573:
        -:  574:
        -:  575:	} else {
        -:  576:	}
    #####:  577:}
        -:  578:
        -:  579:/**
        -:  580: @brief
        -:  581:
        -:  582:
        -:  583: */
        -:  584:void CanNm_ConfirmPnAvailability(NetworkHandleType nmChannelHandle);
        -:  585:
        -:  586:/**
        -:  587: @brief
        -:  588:
        -:  589:
        -:  590: */
        -:  591:Std_ReturnType CanNm_TriggerTransmit(PduIdType TxPduId, PduInfoType* PduInfoPtr);
        -:  592:
        -:  593:/**
        -:  594: @brief
        -:  595:
        -:  596:
        -:  597: */
        -:  598:void CanNm_MainFunction(void);
        -:  599:
        -:  600:
        -:  601://TODO
        -:  602:/**
        -:  603: * @brief Get user data offset byte index in NM Pdu
        -:  604: * @param ChannelConf channel configuration
        -:  605: * @return User starting data byte index in PDU
        -:  606: */
        4:  607:static inline PduLengthType CanNm_Internal_GetUserDataOffset( const CanNm_ConfigType* InConf ) {
        4:  608:    PduLengthType userDataPos = 0;
        4:  609:    userDataPos += (InConf->CanNmPduNidPosition == CANNM_PDU_OFF) ? 0 : 1;
        4:  610:    userDataPos += (InConf->CanNmPduCbvPosition == CANNM_PDU_OFF) ? 0 : 1;
        4:  611:    return userDataPos;
        -:  612:}
        -:  613:
        -:  614:/**
        -:  615: * @brief get the ptr to user data location in Nm Pdu
        -:  616: * @param ChannelConf
        -:  617: * @param MessageSduPtr
        -:  618: * @return pointer to user data bytes in PDU
        -:  619: */
        2:  620:static inline uint8* CanNm_Internal_GetUserDataPtr( const CanNm_ConfigType* InConf, uint8* MessageSduPtr ) {
        2:  621:    PduLengthType userDataOffset = CanNm_Internal_GetUserDataOffset(InConf);
        2:  622:    return &MessageSduPtr[userDataOffset];
        -:  623:}
        -:  624:
        -:  625:/**
        -:  626: * @brief get user data length
        -:  627: * @param ChannelConf
        -:  628: * @return user data length
        -:  629: */
        2:  630:static inline PduLengthType CanNm_Internal_GetUserDataLength( const CanNm_ConfigType* InputConf, const CanNm_InternalType* InternalConf ) {
        2:  631:    PduLengthType userDataOffset = CanNm_Internal_GetUserDataOffset(InputConf);
        2:  632:    return InternalConf->PduLength - userDataOffset;
        -:  633:}
        -:  634:
        -:  635:
    #####:  636:void Nm_NetworkMode(NetworkHandleType nmChannelHandle)
        -:  637:{
        -:  638:
    #####:  639:};
        -:  640:
    #####:  641:void Nm_NetworkStartIndication(NetworkHandleType NmNetworkHandle)
        -:  642:{
        -:  643:
    #####:  644:};
        -:  645:
        -:  646://static inline void CanNm_Internal_PrepareBusSleep_to_RepeatMessage( const CanNm_ConfigType* InputConf, CanNm_InternalType* InternalConf ) {
        -:  647://	InternalConf->Mode = NM_MODE_NETWORK;
        -:  648://	InternalConf->State = NM_STATE_REPEAT_MESSAGE;
        -:  649://	InternalConf->TimeoutTimeLeft = InputConf->CanNmTimeoutTime;  /**< @req CANNM096 */
        -:  650://	InternalConf->RepeatMessageTimeLeft = InputConf->CanNmRepeatMessageTime;	/**< @req CANNM102 */
        -:  651://	InternalConf->MessageCycleTimeLeft = InputConf->MessageCycleOffsetTime;  /**< @req CANNM100.2 */
        -:  652://	// Notify 'Network Mode'
        -:  653://	Nm_NetworkMode(InputConf->NmNetworkHandle);  /**< @req CANNM097.1 */
        -:  654://}
